@using System.Net
@model VERAExample.Models.LearnerShareResponse

@{
    ViewData["Title"] = "Share Via Mobile";
}

<h2>Education Record - Share request</h2>
<div>
    <div class="alert alert-success" role="alert">

        We have requested the learner to share their education record. They should receive a notification shortly.
    </div>
    Learner will be asked to enter the code below. You need to display the code to the learner on your website.
    <br />
    You can use the correlation Id to retrieve the education record once the learner has shared their education record.
    <br />
    <br />
</div>
<div>
    <span class="fw-bold">Correlation Id </span>: @Model.CorrelationId
    <br />
    <span class="fw-bold">Code:</span> @Model.Code
</div>
<br />

<form asp-controller="ShareViaMobile" asp-action="GetData" method="post" class="form-horizontal">
    <input asp-for="CorrelationId" type="hidden" />
    <input asp-for="Code" type="hidden" />
    <div class="col-md-offset-2 col-md-10">
        <button type="submit" class="btn btn-primary">Retrieve Education Record Data</button>
    </div>
</form>

@if (Model.LearnerData != null)
{
    @await Html.PartialAsync("_LearnerData", Model.LearnerData)
}
else if (Model.HttpStatusCode == HttpStatusCode.RequestTimeout)
{
    <br />
    <div class="alert alert-danger" role="alert">
        Either learner has rejected the request or it has been timed out due to lack of action from the learner. Expiry is set to 5 minutes.
    </div>
}
else
{
    <br />
    <div class="alert alert-info" role="alert">
        Learner has not approved your request to their education record yet. Click on the button above to retrieve the data once they have approved.
        You can keep calling this periodically to check if the data is available.
    </div>
}

<a asp-action="Index" asp-controller="Home">Back to start</a>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}
